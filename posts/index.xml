<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pavel Derendyaev test</title>
    <link>http://blog.dddpaul.pw/posts/</link>
    <description>Recent content in Posts on Pavel Derendyaev test</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Jun 2018 19:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.dddpaul.pw/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker network and Swarm mode links</title>
      <link>http://blog.dddpaul.pw/2018/06/24/docker-network-swarm-links/</link>
      <pubDate>Sun, 24 Jun 2018 19:00:00 +0000</pubDate>
      
      <guid>http://blog.dddpaul.pw/2018/06/24/docker-network-swarm-links/</guid>
      <description>Some useful articles &amp;amp; videos about modern networking in Docker:
 Macvlan Driver - Docker Macvlan driver is out of experimental in Docker 1.12. Configuring Macvlan and Ipvlan Linux Networking - What Docker Macvlan driver does under the hood. Materials for 2016 DevOps Networking Forum (DNF) Presentation - Slides about Docker networking with Ansible playbooks. Видео докладов с Docker митапа - Особо интересен доклад Константина Назарова &amp;ldquo;Каждому контейнеру по IP&amp;rdquo; (на русском).</description>
    </item>
    
    <item>
      <title>Docker registry on Centos 7</title>
      <link>http://blog.dddpaul.pw/2018/06/24/docker-registry/</link>
      <pubDate>Sun, 24 Jun 2018 19:00:00 +0000</pubDate>
      
      <guid>http://blog.dddpaul.pw/2018/06/24/docker-registry/</guid>
      <description>1. Create logical volumes for direct-lvm production mode
Assume that we have 40 GByte block device named as /dev/sdb with one full-size Linux partition on it.
Official Device Mapper storage driver guide recommends to use thin pools now. Use these commands to create thin-provisioned logical volumes:
pvcreate /dev/sdb1 # Create physical volume vgcreate docker /dev/sdb1 # Create volume group and add this physical volume to it # Create logical volumes lvcreate --wipesignatures y -n data docker -l 40%VG lvcreate --wipesignatures y -n registry docker -l 40%VG lvcreate --wipesignatures y -n metadata docker -l 2%VG # Convert data volume to thin pool&amp;#39;s data volume lvconvert -y --zero n -c 512K --thinpool docker/data --poolmetadata docker/metadata # Set thin pool autoextend features cat &amp;gt; /etc/lvm/profile/docker-data.</description>
    </item>
    
    <item>
      <title>Kafka tips &amp; tricks</title>
      <link>http://blog.dddpaul.pw/2018/06/24/kafka-tips/</link>
      <pubDate>Sun, 24 Jun 2018 19:00:00 +0000</pubDate>
      
      <guid>http://blog.dddpaul.pw/2018/06/24/kafka-tips/</guid>
      <description>Список консьюмер-групп
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --list  Информация по консьюмер-группе
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --group id1 --describe  Установка оффсета на начало
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --topic topic --group id1 --reset-offsets --to-earliest --execute  Установка оффсета на конец
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --topic topic --group id1 --reset-offsets --to-latest --execute  Установка оффсета на дату-время
docker run wurstmeister/kafka /opt/kafka/bin/kafka-consumer-groups.sh --bootstrap-server kafka:9092 --topic topic --group id1 --reset-offsets --to-datetime &amp;quot;2017-12-22T00:00:00.</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt with lego and Nginx</title>
      <link>http://blog.dddpaul.pw/2018/06/24/lego-nginx/</link>
      <pubDate>Sun, 24 Jun 2018 19:00:00 +0000</pubDate>
      
      <guid>http://blog.dddpaul.pw/2018/06/24/lego-nginx/</guid>
      <description>xenolf/lego it&amp;rsquo;s a feature-rich Let&amp;rsquo;s Encrypt client and ACME library written in Go.
1. Prepare Nginx server
server { listen 80 default; server_name example.org www.example.org; location /.well-known/acme-challenge { proxy_pass http://127.0.0.1:81; proxy_set_header Host $host; } # Other directives }  2. Update ca-certificates for CentOS 5 (optional)
Let&amp;rsquo;s Encrypt CA certificate is not included into root CA bundle of old Linux distributions like RHEL/Centos 5. You have to replace this bundle manually with fresh one from cURL website:</description>
    </item>
    
    <item>
      <title>Запуск контейнеров с помощью Fig</title>
      <link>http://blog.dddpaul.pw/2018/06/24/docker-fig/</link>
      <pubDate>Sun, 24 Jun 2018 19:00:00 +0000</pubDate>
      
      <guid>http://blog.dddpaul.pw/2018/06/24/docker-fig/</guid>
      <description>Это третья статья цикла Building test environments with Docker.
Как мы уже убедились, запуск контейнеров с помощью docker run — занятие весьма муторное, т.к. необходимо указывать множество опций. При запуске же нескольких контейнеров ситуация только ухудшается, т.к. теперь нужно задавать имена и линки.
Эту проблему решает инструмент Fig, который может запустить/остановить целое тестовое окружение, состоящее из набора контейнеров. Описание контейнеров задано в YAML-файле. Таким образом, этот YAML-файл представляет собой конфигурацию тестового окружения.</description>
    </item>
    
    <item>
      <title>Подготовка и запуск docker-контейнеров</title>
      <link>http://blog.dddpaul.pw/2015/01/04/docker-prepare/</link>
      <pubDate>Sun, 04 Jan 2015 13:49:06 +0000</pubDate>
      
      <guid>http://blog.dddpaul.pw/2015/01/04/docker-prepare/</guid>
      <description>Это первая статья цикла Building test environments with Docker.
Сразу оговорюсь, что все docker-контейнеры основаны на baseimage-docker. Этот образ позволяет запускать в контейнере несколько приложений с помощью супервизора runit и содержит ssh, cron, syslog &amp;ldquo;из коробки&amp;rdquo;.
Хотя подобный подход не рекомендуется разработчиками Docker, он очень удобен в эксплуатации и не принуждает разработчика к своему &amp;ldquo;proper way&amp;rdquo;. Всегда можно использовать канонический подход от Docker с volumes и nsenter, а, при желании, подключаться к контейнерам по ssh.</description>
    </item>
    
    <item>
      <title>First note</title>
      <link>http://blog.dddpaul.pw/2014/07/28/oldest/</link>
      <pubDate>Mon, 28 Jul 2014 12:00:00 +0000</pubDate>
      
      <guid>http://blog.dddpaul.pw/2014/07/28/oldest/</guid>
      <description>This blog is based on Hugo - static site generator written on Go. GitHub interaction is organized with use of Hosting on GitHub Pages tutorial. See &amp;ldquo;Configure git Workflow&amp;rdquo; section specifically.
And for all of the git 1.7.x (and older) users - you can grab git-subtree from contrib directory of Git repo. I&amp;rsquo;ve used git-subtree from latest 1.8.x. It&amp;rsquo;s just a shell script, run make, chmod +x git-subtree and copy it to /usr/lib/git-core.</description>
    </item>
    
  </channel>
</rss>